/* SASS- (sass-lang.com) Syntatically Awesome Stylesheet - CSS PreProcessor. It extends CSS with features like variables, nested rules, and mixins, making it easier to write and manage complex styles.
    NOTE: The browser doesnt read SASS files directly. It has to be compiled down to refular CSS using a SASS compiler.
    SASS FILE/Syntax:
    .SCSS Syntax/File- CSS formatted - .scss
    .SASS (Indented)Syntax/File- Indentation format - .sass

    Sass-Indentation Syntax: Css without curly braces.
    nav
        background-color: $primary-color;

            a
                font-weight: bold;
                text-decoration: none;
                margin-left: 1rem;

            a:hover
                color: $tert-color;
    
    
    INSTALLATION: Using npm package 
    Create a scss folder in the main root. 
    Then create a style.css file within it. Write css codes in it.
    Create a css folder in the root as well.
    Link with index.html
    Terminal - Run "npm install -g sass"
    COMPILATION: Terminal - Run "sass --watch scss/style.scss css/style.css" This will generate a style.css file with the css folder. SASS Compiler extension on VSCode extensions.
    NOTE: DON'T EVER EDIT/TOUCH THE CSS File generated from sass after compilation. Rather write all sass codes in your style.scss file, VSCode will autom update it in the style.css file.


    INSTALLATION: Using VSCode Extension 
    Create a scss folder in the main root. 
    Then create a style.css file within it. Write css codes in it.
    Create a css folder in the root as well.
    Link with index.html
    Terminal - Run "npm install -g sass"
    Install 'Live Sass Compiler' from VSCode extension.
    Beneath vscode footer, click "watch sass" to keep watching styles.
    Will generate a style.css file.
    NOTE: DON'T EVER EDIT/TOUCH THE CSS File generated from sass after compilation. Rather write all sass codes in your style.scss file, VSCode will autom update it in the style.css file.
    Vscode Settings >> Search Live compile >> Formats >> "liveSassCompile.settings.formats" >> "savePath": "/css".

    //Use Sass in React Project
    cd your-project-folder
    Run "npm install sass"
    Rename CSS Files to SCSS
    Import Sass Files in Your Components: import './styles/main.scss';
    Start your Vite development server to see your changes: npm run dev

    Compilation - Long as use underscore(_) bfr the name of the file, sass won't compile it. So the file can simply be used whr needed.

    //DEPLOYMENT: You don't deploy your hardcoded style.scss file, rather deploy the style.css file generated by Sass.
    
    FEATURES

        Variables - Prefixed with $ ..Values (like colors, fonts, or sizes etc) that you can reuse throughout the stylesheet. Variables can store almost any CSS value*/
        $primary-color: #f4f4f4;
        $secondary-color: rgba(255, 0, 0, 0.8);
        $font-size: 16px;
        $padding: 10px;
        $width: 100vw;
        $font-stack: "Helvetica, Arial, sans-serif";
        $border-radius: 5px;
        $border-color: #ddd;
        $border-width: 1px;
        $transition-time: 0.3s;
        $animation-delay: 0.5s;
        $box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        $z-index-modal: 1000;
        $z-index-overlay: 500;
        $opacity-hover: 0.8;
        $opacity-disabled: 0.5;
        $breakpoint-mobile: 480px;
        $breakpoint-tablet: 768px;
        $breakpoint-desktop: 1024px;
        $background-image-url: url('/images/bg.png');
        $container-width: 90%;
        $base-font-size: 1rem;

        // Global styles/elements
        a{
            color: $white;
            text-decoration: none;
        }

        // Nesting styles/elements- Nest child selectors in parent elenments
        .nav{
            color: $light-color;
            display: flex;
            justify-content: space-between;

            a{
                color: $light-color;
                text-decoration: none;
                margin-left: 1rem;
            }
            
            p{
                color: $light-color;
                margin-right: 5rem;
            }
        }

        //& - Parent selector - added class name E.g "flex-cont" within "flex" class name
        //&:pseudo-class
        .flex{
            display: flex;
            align-items: center;

            &-cont{
                margin-top: 5rem;
                display: flex;
            
                h1{
                    margin-top: 5rem;
                }
            }
        }

        .flex{
            display: flex;

            &:hover{
                margin-top: 5rem;
            }
        }


        /*Mixins 
            Mixins in Sass are reusable blocks of styles that allow you to group CSS declarations together. You can create a mixin using the @mixin directive and include it in your styles with @include. Mixins can also accept parameters, making them versatile for different styling needs.*/
            @mixin flexCenter {
                display: flex;
                justify-content: center;
                align-items: center;
            }

            body{
                @include flexCenter;
            }

            //ii
            @mixin flexcenter ($direction){
                display: flex;
                justify-content: center;
                align-items: center;
                flex-direction: $direction
            }

            body{
                @include flexcenter(row);
            }
            
            //iii
            @mixin box-shadow($shadow) {
            box-shadow: $shadow;
            }

            .button {
            @include box-shadow(2px 2px 5px rgba(0, 0, 0, 0.5));
            }
            // iv
            @mixin  setbackground-and-text-color($color){
                background-color: $color;
                color: set-textcolor($color);
            }
            .container{
                @include setbackground-and-text-color($primary-color);
            }

            //v
            .btn-primary-color {
                @extend %btn;
                @include setbackground-and-text-color(lighten($primary-color, 10%));
                // background-color: lighten($primary-color, 10%); 
            }

            //vi - Boolean
            @mixin theme($light-theme: true){
                @if $light-theme {
                    background-color: lighten($primary-color, 100%);
                    color: darken($text-color, 100%);
                }
            }

            .lightBody{
                @include theme($light-theme: true)
            };
        
        /* Conditionals - Using @if, @else if, and @else statements to style elements differently depending on variables or certain criteria*/
            @mixin triangle($size, $color, $direction) {
                height: 0;
                width: 0;
                border-color: white;

                @if $direction == up {
                    border-bottom-color: &color;
                }@else if $direction == right {
                    border-left-color: &color;
                }@else if $direction == down {
                    border-top-color: &color;
                }@else if $direction == left {
                    border-right-color: &color;
                }@else {
                    @error "Unknown direction #{$direction}.";
                }
            }

            .shapeitem {
            @include triangle(5px, black, right);
            }

        /* Inheritance: Inheriting styles && Lighten and darken Function
            Inheritance in Sass allows you to reuse styles by "inheriting" properties from one selector to another. Uses @extend (or "extend") to facilitate this.
            Class selectors(.btn) and placeholders selectors(%btn-style)*/
            //Shared/base styles plus added styles
            %btn{
                padding: 8px 22px;
                border-radius: 5px;
                margin-top: 1.5rem;
                color: $white;

                &:hover{
                    transition: ease-in-out 0.5s;
                }
            }
            
            .btn-primary-color {
                @extend %btn;
                background-color: lighten($primary-color, 10%); 
            }
            
            .btn-secondary-color {
                @extend %btn;
                background-color: $secondary-color;
                margin-left: 0.5rem;

                &:hover{
                    background-color: darken($secondary-color, 5%);
                }
            }
        

        /* Modules
        Create multiple scss files
        Config for primary styles/variables.. Functions ..Mixins
        Within the scss folder- create/declare  _more.scss specifically with underscore before file name - tells SASS not to compile this file rather its used for imports/ configuration styles etc
        Use @import 'configcssname'; to import and use other css files within the style.scss. */
        @import 'config';
        @import 'variables';
        @import 'utilities';

        /*Functions
        Set text color based on background && Lightness and Drakness conditional check
        Define function within config file: */
        @function set-textcolor($color) {
            @if(lightness($color) > 70 ){
                @return #333;
            } @else {
                @return #fff;
            }
        }
            /*function usage */
            .container{
                background-color: $primary-color;
                color: set-textcolor($primary-color);
            }

        //ii
        @function weight($weight-name) {
            @return map-get($font-weights, $weight-name);
        }
            /*function usage */
            .container{
                font-weight: weight(bold);
            }
        
        /*Loops
        Margin and Padding with each loop*/
        //Create a variable and set it to a list.
        $spaceamounts: (1, 2, 3, 4, 5);

        //Loop through the list
        @each $space in $spaceamounts {
            .m-#{$space} {
                margin: #{$space}rem;
            }

            .my-#{$space} {
                margin: #{$space}rem 0;
            }

            .mx-#{$space} {
                margin: 0 #{$space}rem;
            }

            .p-#{$space} {
                padding: #{$space}rem;
            }
            }
            // <h1 class="my-5"> Hello </h1>
            
        //For Loop: In SCSS, you can use @for loops to create repeated styles based on a counter.
        @for $i from 1 through 5 {
            .margin-#{$i} {
              margin: #{$i * 10}px;
            }
          }
        
        //ii
        @for $i from 1 through 5 {
            .navItem:nth-child(#{$i}) {
              transition-delay: ($i * 0.1s) + 0.15s;
            }
          }

        //iii
        $colors: red, blue, green, yellow;

        @for $i from 1 through length($colors) {
        .text-color-#{$i} {
            color: nth($colors, $i);
        }
        }


        //Map and key-value pairs
        $font-weights: (
            "regular": 400,
            "medium": 500,
            "bold": 700
        );

        body {
            font-weight: map-get($font-weights, bold );
        }

        //Media Queries
        //Create a _query.scss file. Define queries. Import into main style.scss
        //In config file: Define. Import responsive file.
        @mixin media-sm {
            @media screen and (min-width: 600px) {
                @content;
            }
        }
        @mixin media-md {
            @media screen and (min-width: 768px) {
                @content;
            }
        }
        @mixin media-lg {
            @media screen and (min-width: 1024px) {
                @content;
            }
        }
        @mixin media-xl {
            @media screen and (min-width: 1600px) {
                @content;
            }
        }

        //In responsive file.
        @include media-md{
            .flex{
        
                h2{
                    color: red;
                }
            }
        }
        @include media-md{
            .flex{
        
                h2{
                    color: green;
                }
            }
        }   
        
        




