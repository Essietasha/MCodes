/* SASS- Syntatically Awesome Stylesheet - CSS PreProcessor. It extends CSS with features like variables, nested rules, and mixins, making it easier to write and manage complex styles.
    NOTE: The browser doesnt read SASS files directly. It has to be compiled down to refular CSS using a SASS compiler.
    SASS FILE:
    .SCSS File- CSS formatted
    .SASS File- Indentation format
    
    INSTALLATION: Using npm package 
    Create a scss folder in the main root. 
    Then create a style.css file within it. Write css codes in it.
    Craete a css folder in the root as well.
    Terminal - Run "npm install -g sass"
    COMPILATION: Terminal - Run "sass --watch scss/style.scss css/style.css" This will generate a style.css file with the css folder. SASS Compiler extension on VSCode extensions.
    NOTE: DON'T EVER EDIT/TOUCH THE CSS File generated from sass after compilation. Rather write all sass codes in your style.scss file, VSCode will autom update it in the style.css file.


    INSTALLATION: Using VSCode Extension 
    Create a scss folder in the main root. 
    Then create a style.css file within it. Write css codes in it.
    Craete a css folder in the root as well.
    Terminal - Run "npm install -g sass"
    Install 'Live Sass Compiler' from VSCode extension.
    Beneath vscode footer, click "watch sass" to keep watching styles.
    Will generate a style.css file.
    NOTE: DON'T EVER EDIT/TOUCH THE CSS File generated from sass after compilation. Rather write all sass codes in your style.scss file, VSCode will autom update it in the style.css file.
    Vscode Settings >> Search Live compile >> Formats >> "liveSassCompile.settings.formats" >> "savePath": "/css".

    //DEPLOYMENT: You don't deploy your hardcoded style.scss file, rather deploy the style.css file generated by Sass.
    FEATURES
        Variables - Prefixed with $ */
        $light-color: #f4f4f4;

        // Global styles/elements
        a{
            color: $white;
            text-decoration: none;
        }

        // Nesting styles/elements- Nest child selectors in parent elenments
        .nav{
            color: $light-color;
            display: flex;
            justify-content: space-between;

            a{
                color: $light-color;
                text-decoration: none;
                margin-left: 1rem;
            }
            
            p{
                color: $light-color;
                margin-right: 5rem;
            }
        }

        //&-added class name E.g "flex-cont" within "flex" class name
        //&:pseudo-class
        .flex{
            display: flex;
            align-items: center;

            &-cont{
                margin-top: 5rem;
                display: flex;
            
                h1{
                    margin-top: 5rem;
                }
            }
        }

        .flex{
            display: flex;

            &:hover{
                margin-top: 5rem;
            }
        }


/*      Modules- Can break css files into smaller files or components in a main scss or sass file
        Compilation - Long as use underscore(_) bfr the name of the file, sass won't compile it. So the file can simply be used whr needed.
        
        Mixins 
            Mixins in Sass are reusable blocks of styles that allow you to group CSS declarations together. You can create a mixin using the @mixin directive and include it in your styles with @include. Mixins can also accept parameters, making them versatile for different styling needs.*/
            @mixin box-shadow($shadow) {
            box-shadow: $shadow;
            }

            .button {
            @include box-shadow(2px 2px 5px rgba(0, 0, 0, 0.5));
            }
            /* ii */
            @mixin  setbackground-and-text-color($color){
                background-color: $color;
                color: set-textcolor($color);
            }
            .container{
                @include setbackground-and-text-color($primary-color);
            }

            /* iii */
            .btn-primary-color {
                @extend %btn;
                @include setbackground-and-text-color(lighten($primary-color, 10%));
                // background-color: lighten($primary-color, 10%); 
            }

        /* Inheritance: Inheriting styles && Lighten and darken Function
            Inheritance in Sass allows you to reuse styles by "inheriting" properties from one selector to another. Uses @extend (or "extend") to facilitate this.
            Class selectors(.btn) and placeholders selectors(%btn-style)*/
            //Shared/base styles plus added styles
            %btn{
                padding: 8px 22px;
                border-radius: 5px;
                margin-top: 1.5rem;
                color: $white;

                &:hover{
                    transition: ease-in-out 0.5s;
                }
            }
            
            .btn-primary-color {
                @extend %btn;
                background-color: lighten($primary-color, 10%); 
            }
            
            .btn-secondary-color {
                @extend %btn;
                background-color: $secondary-color;
                margin-left: 0.5rem;

                &:hover{
                    background-color: darken($secondary-color, 5%);
                }
            }
        
        /* Conditionals - Using @if, @else if, and @else statements to style elements differently depending on variables or certain criteria*/
            @mixin triangle($size, $color, $direction) {
                height: 0;
                width: 0;
                border-color: white;

                @if $direction == up {
                    border-bottom-color: &color;
                }@else if $direction == right {
                    border-left-color: &color;
                }@else if $direction == down {
                    border-top-color: &color;
                }@else if $direction == left {
                    border-right-color: &color;
                }@else {
                    @error "Unknown direction #{$direction}.";
                }
            }

            .shapeitem {
            @include triangle(5px, black, right);
            }

        /* Modules
        Create multiple scss files
        Config for primary styles/variables.. Functions ..Mixins
        Within the scss folder- create/declare  _more.scss specifically with underscore before file name - tells SASS not to compile this file rather its used for imports/ configuration styles etc
        Use @import 'configcssname'; to import and use other css files within the style.scss. */
        @import 'config';

        /*Functions
        Set text color based on background && Lightness and Drakness conditional check
        Define function within config file: */
        @function set-textcolor($color) {
            @if(lightness($color) > 70 ){
                @return #333;
            } @else {
                @return #fff;
            }
        }
            /*function usage */
            .container{
                background-color: $primary-color;
                color: set-textcolor($primary-color);
            }
        
        /*Loops
        Margin and Padding with each loop*/

        //Create a variable and set it to a list.
        $spaceamounts: (1, 2, 3, 4, 5);

        //Loop through the list
        @each $space in $spaceamounts {
            .m-#{$space} {
                margin: #{$space}rem;
            }

            .my-#{$space} {
                margin: #{$space}rem 0;
            }

            .mx-#{$space} {
                margin: 0 #{$space}rem;
            }

            .p-#{$space} {
                padding: #{$space}rem;
            }
        }

        // <h1 class="my-5"> Hello </h1>

    //Media Queries
    //Create a _query.scss file. Define queries. Import into main style.scss





