/* SASS- Syntatically Awesome Stylesheet - CSS PreProcessor. It extends CSS with features like variables, nested rules, and mixins, making it easier to write and manage complex styles.
    NOTE: The browser doesnt read SASS files directly. It has to be compiled down to refular CSS using a SASS compiler.
    SASS FILE:
    .SCSS File- CSS formatted
    .SASS File- Indentation format

    INSTALLATION: Using npm package 
    Create a scss folder in the main root. 
    Then create a style.css file within it. Write css codes in it.
    Craete a css folder in the root as well.
    Terminal - Run "npm install -g sass"
    COMPILATION: Terminal - Run "sass --watch scss/style.scss css/style.css" This will generate a style.css file with the css folder. SASS Compiler extension on VSCode extensions.
    NOTE: DON'T EVER EDIT/TOUCH THE CSS File generated from sass after compilation. Rather write all sass codes in your style.scss file, VSCode will autom update it in the style.css file.


    INSTALLATION: Using VSCode Extension 
    Create a scss folder in the main root. 
    Then create a style.css file within it. Write css codes in it.
    Craete a css folder in the root as well.
    Terminal - Run "npm install -g sass"
    Install 'Live Sass Compiler' from VSCode extension.
    Beneath vscode footer, click "watch sass"
    Will generate a style.css file.
    NOTE: DON'T EVER EDIT/TOUCH THE CSS File generated from sass after compilation. Rather write all sass codes in your style.scss file, VSCode will autom update it in the style.css file.
    Vscode Settings >> Search Live compile >> Formats >> "liveSassCompile.settings.formats" >> "savePath": "/css".

    FEATURES
        Variables - Prefixed with $ */
/*      Nesting- Nest child selectors in parent elenments */
.nav {
  color: #f4f4f4;
  display: flex;
  justify-content: space-between;
}
.nav a {
  color: #fff;
  font-weight: bold;
  text-decoration: none;
  margin-left: 1rem;
}

/*      Modules- Can break css files into smaller files or components in a main scss or sass file
        Compilation - Long as use underscore(_) bfr the name of the file, sass won't compile it. So the file can simply be used whr needed.
        Mixins and Functions - 
            Mixins in Sass are reusable blocks of styles that allow you to group CSS declarations together. You can create a mixin using the @mixin directive and include it in your styles with @include. Mixins can also accept parameters, making them versatile for different styling needs.*/
.button {
  box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);
}

/* Inheritance: Inheriting styles
    Inheritance in Sass allows you to reuse styles by "inheriting" properties from one selector to another. Uses @extend (or "extend") to facilitate this.
    Class selectors(.btn) and placeholders selectors(%btn-style)*/
.primary-button, .button {
  color: white;
  background-color: blue;
}

.primary-button {
  background-color: green;
}

/* Conditionals - Using @if, @else if, and @else statements to style elements differently depending on variables or certain criteria*/
.shapeitem {
  height: 0;
  width: 0;
  border-color: white;
  border-left-color: .shapeitem color;
}